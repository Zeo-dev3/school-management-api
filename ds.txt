//canteen.controller.ts
import {
  Body,
  Controller,
  Get,
  Param,
  ParseIntPipe,
  Post,
  Put,
  Query,
} from '@nestjs/common';
import { CanteenService } from './canteen.service';
import { CanteenProductDto } from './dtos/canteenProduct.dto';
import { CanteenCategoryDto } from './dtos/canteenCategoryDto';

@Controller('canteen')
export class CanteenController {
  constructor(private canteenService: CanteenService) {}

  @Get('products')
  async getProducts() {
    return await this.canteenService.getProducts();
  }

  @Post('add-product')
  async addProduct(@Body() productData: CanteenProductDto) {
    return await this.canteenService.addProduct(productData);
  }

  @Put('update-product/:id')
  async updateProduct(
    @Param('id', ParseIntPipe) id: number,
    @Body() productData: CanteenProductDto,
  ) {
    console.log('id:', id);
    console.log('productData:', productData);
    return await this.canteenService.updateProduct(id, productData);
  }

  @Post('add-category')
  async addCategory(@Body() categoryData: CanteenCategoryDto) {
    return this.canteenService.addCategory(categoryData);
  }

  @Post('/test/:id')
  test(@Body() productData, @Query('id') id: number) {
    console.log(id);
    return { productData, id };
  }
}


//canteen.service.ts
import { HttpException, Injectable } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import { CanteenProductDto } from './dtos/canteenProduct.dto';

@Injectable()
export class CanteenService {
  constructor(private prisma: PrismaService) {}

  async getProducts() {
    const products = await this.prisma.category.findMany({
      include: {
        products: {
          orderBy: {
            id: 'asc',
          },
        },
      },
      orderBy: {
        id: 'asc',
      },
    });

    if (!products) throw new HttpException('Products not found', 404);
    return products;
  }

  async addProduct(productData: CanteenProductDto) {
    const category = await this.prisma.category.findUnique({
      where: {
        id: productData.categoryId,
      },
    });

    if (!category) throw new HttpException('Category not found', 404);

    const newProduct = await this.prisma.product.create({
      data: {
        name: productData.name,
        price: productData.price,
        stock: productData.stock,
        rating: productData.rating,
        reviewers: productData.reviewers,
        shopName: productData.shopName,
        category: { connect: { id: productData.categoryId } },
      },
    });

    return newProduct;
  }

  async addCategory(category) {
    const newCategory = await this.prisma.category.create({
      data: {
        ...category,
      },
    });

    if (!category) throw new HttpException('Failed to create category', 500);

    return newCategory;
  }

  async updateProduct(id, productData: CanteenProductDto) {
    const updatedProduct = await this.prisma.product.update({
      where: {
        id,
      },
      data: {
        ...productData,
      },
    });
    if (!updatedProduct)
      throw new HttpException('Database error,Failed to update product', 500);

    return updatedProduct;
  }
}
 

tolong buatkan api.spec.md nya